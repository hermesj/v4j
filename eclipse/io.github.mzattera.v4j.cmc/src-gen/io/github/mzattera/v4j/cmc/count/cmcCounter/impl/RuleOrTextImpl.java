/**
 * generated by Xtext 2.25.0
 */
package io.github.mzattera.v4j.cmc.count.cmcCounter.impl;

import io.github.mzattera.v4j.cmc.count.cmcCounter.CmcCounterPackage;
import io.github.mzattera.v4j.cmc.count.cmcCounter.Rule;
import io.github.mzattera.v4j.cmc.count.cmcCounter.RuleOrText;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Rule Or Text</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.github.mzattera.v4j.cmc.count.cmcCounter.impl.RuleOrTextImpl#getRule <em>Rule</em>}</li>
 *   <li>{@link io.github.mzattera.v4j.cmc.count.cmcCounter.impl.RuleOrTextImpl#getTxt <em>Txt</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RuleOrTextImpl extends MinimalEObjectImpl.Container implements RuleOrText
{
  /**
   * The cached value of the '{@link #getRule() <em>Rule</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRule()
   * @generated
   * @ordered
   */
  protected Rule rule;

  /**
   * The default value of the '{@link #getTxt() <em>Txt</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTxt()
   * @generated
   * @ordered
   */
  protected static final String TXT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTxt() <em>Txt</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTxt()
   * @generated
   * @ordered
   */
  protected String txt = TXT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RuleOrTextImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CmcCounterPackage.Literals.RULE_OR_TEXT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rule getRule()
  {
    if (rule != null && rule.eIsProxy())
    {
      InternalEObject oldRule = (InternalEObject)rule;
      rule = (Rule)eResolveProxy(oldRule);
      if (rule != oldRule)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, CmcCounterPackage.RULE_OR_TEXT__RULE, oldRule, rule));
      }
    }
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Rule basicGetRule()
  {
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRule(Rule newRule)
  {
    Rule oldRule = rule;
    rule = newRule;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CmcCounterPackage.RULE_OR_TEXT__RULE, oldRule, rule));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTxt()
  {
    return txt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTxt(String newTxt)
  {
    String oldTxt = txt;
    txt = newTxt;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CmcCounterPackage.RULE_OR_TEXT__TXT, oldTxt, txt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CmcCounterPackage.RULE_OR_TEXT__RULE:
        if (resolve) return getRule();
        return basicGetRule();
      case CmcCounterPackage.RULE_OR_TEXT__TXT:
        return getTxt();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CmcCounterPackage.RULE_OR_TEXT__RULE:
        setRule((Rule)newValue);
        return;
      case CmcCounterPackage.RULE_OR_TEXT__TXT:
        setTxt((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CmcCounterPackage.RULE_OR_TEXT__RULE:
        setRule((Rule)null);
        return;
      case CmcCounterPackage.RULE_OR_TEXT__TXT:
        setTxt(TXT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CmcCounterPackage.RULE_OR_TEXT__RULE:
        return rule != null;
      case CmcCounterPackage.RULE_OR_TEXT__TXT:
        return TXT_EDEFAULT == null ? txt != null : !TXT_EDEFAULT.equals(txt);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (txt: ");
    result.append(txt);
    result.append(')');
    return result.toString();
  }

} //RuleOrTextImpl
