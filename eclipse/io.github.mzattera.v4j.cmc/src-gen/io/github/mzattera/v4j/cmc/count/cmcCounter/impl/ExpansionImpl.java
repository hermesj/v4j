/**
 * generated by Xtext 2.28.0
 */
package io.github.mzattera.v4j.cmc.count.cmcCounter.impl;

import io.github.mzattera.v4j.cmc.count.cmcCounter.CmcCounterPackage;
import io.github.mzattera.v4j.cmc.count.cmcCounter.Expansion;
import io.github.mzattera.v4j.cmc.count.cmcCounter.RuleOrText;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expansion</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.github.mzattera.v4j.cmc.count.cmcCounter.impl.ExpansionImpl#getCount <em>Count</em>}</li>
 *   <li>{@link io.github.mzattera.v4j.cmc.count.cmcCounter.impl.ExpansionImpl#getFrequency <em>Frequency</em>}</li>
 *   <li>{@link io.github.mzattera.v4j.cmc.count.cmcCounter.impl.ExpansionImpl#getCumulatedFreq <em>Cumulated Freq</em>}</li>
 *   <li>{@link io.github.mzattera.v4j.cmc.count.cmcCounter.impl.ExpansionImpl#getRules <em>Rules</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpansionImpl extends MinimalEObjectImpl.Container implements Expansion
{
  /**
   * The default value of the '{@link #getCount() <em>Count</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCount()
   * @generated
   * @ordered
   */
  protected static final double COUNT_EDEFAULT = 0.0;

  /**
   * The cached value of the '{@link #getCount() <em>Count</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCount()
   * @generated
   * @ordered
   */
  protected double count = COUNT_EDEFAULT;

  /**
   * The default value of the '{@link #getFrequency() <em>Frequency</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFrequency()
   * @generated
   * @ordered
   */
  protected static final double FREQUENCY_EDEFAULT = 0.0;

  /**
   * The cached value of the '{@link #getFrequency() <em>Frequency</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFrequency()
   * @generated
   * @ordered
   */
  protected double frequency = FREQUENCY_EDEFAULT;

  /**
   * The default value of the '{@link #getCumulatedFreq() <em>Cumulated Freq</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCumulatedFreq()
   * @generated
   * @ordered
   */
  protected static final double CUMULATED_FREQ_EDEFAULT = 0.0;

  /**
   * The cached value of the '{@link #getCumulatedFreq() <em>Cumulated Freq</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCumulatedFreq()
   * @generated
   * @ordered
   */
  protected double cumulatedFreq = CUMULATED_FREQ_EDEFAULT;

  /**
   * The cached value of the '{@link #getRules() <em>Rules</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRules()
   * @generated
   * @ordered
   */
  protected EList<RuleOrText> rules;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpansionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CmcCounterPackage.Literals.EXPANSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public double getCount()
  {
    return count;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCount(double newCount)
  {
    double oldCount = count;
    count = newCount;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CmcCounterPackage.EXPANSION__COUNT, oldCount, count));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public double getFrequency()
  {
    return frequency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFrequency(double newFrequency)
  {
    double oldFrequency = frequency;
    frequency = newFrequency;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CmcCounterPackage.EXPANSION__FREQUENCY, oldFrequency, frequency));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public double getCumulatedFreq()
  {
    return cumulatedFreq;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCumulatedFreq(double newCumulatedFreq)
  {
    double oldCumulatedFreq = cumulatedFreq;
    cumulatedFreq = newCumulatedFreq;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CmcCounterPackage.EXPANSION__CUMULATED_FREQ, oldCumulatedFreq, cumulatedFreq));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<RuleOrText> getRules()
  {
    if (rules == null)
    {
      rules = new EObjectContainmentEList<RuleOrText>(RuleOrText.class, this, CmcCounterPackage.EXPANSION__RULES);
    }
    return rules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CmcCounterPackage.EXPANSION__RULES:
        return ((InternalEList<?>)getRules()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CmcCounterPackage.EXPANSION__COUNT:
        return getCount();
      case CmcCounterPackage.EXPANSION__FREQUENCY:
        return getFrequency();
      case CmcCounterPackage.EXPANSION__CUMULATED_FREQ:
        return getCumulatedFreq();
      case CmcCounterPackage.EXPANSION__RULES:
        return getRules();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CmcCounterPackage.EXPANSION__COUNT:
        setCount((Double)newValue);
        return;
      case CmcCounterPackage.EXPANSION__FREQUENCY:
        setFrequency((Double)newValue);
        return;
      case CmcCounterPackage.EXPANSION__CUMULATED_FREQ:
        setCumulatedFreq((Double)newValue);
        return;
      case CmcCounterPackage.EXPANSION__RULES:
        getRules().clear();
        getRules().addAll((Collection<? extends RuleOrText>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CmcCounterPackage.EXPANSION__COUNT:
        setCount(COUNT_EDEFAULT);
        return;
      case CmcCounterPackage.EXPANSION__FREQUENCY:
        setFrequency(FREQUENCY_EDEFAULT);
        return;
      case CmcCounterPackage.EXPANSION__CUMULATED_FREQ:
        setCumulatedFreq(CUMULATED_FREQ_EDEFAULT);
        return;
      case CmcCounterPackage.EXPANSION__RULES:
        getRules().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CmcCounterPackage.EXPANSION__COUNT:
        return count != COUNT_EDEFAULT;
      case CmcCounterPackage.EXPANSION__FREQUENCY:
        return frequency != FREQUENCY_EDEFAULT;
      case CmcCounterPackage.EXPANSION__CUMULATED_FREQ:
        return cumulatedFreq != CUMULATED_FREQ_EDEFAULT;
      case CmcCounterPackage.EXPANSION__RULES:
        return rules != null && !rules.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (count: ");
    result.append(count);
    result.append(", frequency: ");
    result.append(frequency);
    result.append(", cumulatedFreq: ");
    result.append(cumulatedFreq);
    result.append(')');
    return result.toString();
  }

} //ExpansionImpl
