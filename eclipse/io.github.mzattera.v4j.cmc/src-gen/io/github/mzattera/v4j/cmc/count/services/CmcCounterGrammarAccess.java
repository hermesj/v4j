/*
 * generated by Xtext 2.28.0
 */
package io.github.mzattera.v4j.cmc.count.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CmcCounterGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class GrammarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.mzattera.v4j.cmc.count.CmcCounter.Grammar");
		private final Assignment cRulesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_0 = (RuleCall)cRulesAssignment.eContents().get(0);
		
		//Grammar:
		//    rules+=Rule*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//rules+=Rule*
		public Assignment getRulesAssignment() { return cRulesAssignment; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_0() { return cRulesRuleParserRuleCall_0; }
	}
	public class RuleOrTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.mzattera.v4j.cmc.count.CmcCounter.RuleOrText");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRuleAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cRuleRuleCrossReference_0_0 = (CrossReference)cRuleAssignment_0.eContents().get(0);
		private final RuleCall cRuleRuleIDTerminalRuleCall_0_0_1 = (RuleCall)cRuleRuleCrossReference_0_0.eContents().get(1);
		private final Assignment cTxtAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTxtVTEXTTerminalRuleCall_1_0 = (RuleCall)cTxtAssignment_1.eContents().get(0);
		
		//RuleOrText:
		//    (rule=[Rule] | txt=VTEXT)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(rule=[Rule] | txt=VTEXT)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//rule=[Rule]
		public Assignment getRuleAssignment_0() { return cRuleAssignment_0; }
		
		//[Rule]
		public CrossReference getRuleRuleCrossReference_0_0() { return cRuleRuleCrossReference_0_0; }
		
		//ID
		public RuleCall getRuleRuleIDTerminalRuleCall_0_0_1() { return cRuleRuleIDTerminalRuleCall_0_0_1; }
		
		//txt=VTEXT
		public Assignment getTxtAssignment_1() { return cTxtAssignment_1; }
		
		//VTEXT
		public RuleCall getTxtVTEXTTerminalRuleCall_1_0() { return cTxtVTEXTTerminalRuleCall_1_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.mzattera.v4j.cmc.count.CmcCounter.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpansionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpansionsExpansionParserRuleCall_2_0 = (RuleCall)cExpansionsAssignment_2.eContents().get(0);
		
		//Rule:
		//    name=ID ':' (expansions+=Expansion)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' (expansions+=Expansion)+
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(expansions+=Expansion)+
		public Assignment getExpansionsAssignment_2() { return cExpansionsAssignment_2; }
		
		//Expansion
		public RuleCall getExpansionsExpansionParserRuleCall_2_0() { return cExpansionsExpansionParserRuleCall_2_0; }
	}
	public class ExpansionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.mzattera.v4j.cmc.count.CmcCounter.Expansion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCountAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCountDOUBLETerminalRuleCall_0_0 = (RuleCall)cCountAssignment_0.eContents().get(0);
		private final Assignment cFrequencyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFrequencyDOUBLETerminalRuleCall_1_0 = (RuleCall)cFrequencyAssignment_1.eContents().get(0);
		private final Assignment cCumulatedFreqAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCumulatedFreqDOUBLETerminalRuleCall_2_0 = (RuleCall)cCumulatedFreqAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cFullStopKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cRulesAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cRulesRuleOrTextParserRuleCall_3_1_0_0 = (RuleCall)cRulesAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cFullStopKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cRulesAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cRulesRuleOrTextParserRuleCall_3_1_1_1_0 = (RuleCall)cRulesAssignment_3_1_1_1.eContents().get(0);
		
		//Expansion:
		//    count=DOUBLE frequency=DOUBLE cumulatedFreq=DOUBLE  ('.' | (rules+=RuleOrText ('.' rules+=RuleOrText)*))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//count=DOUBLE frequency=DOUBLE cumulatedFreq=DOUBLE  ('.' | (rules+=RuleOrText ('.' rules+=RuleOrText)*))
		public Group getGroup() { return cGroup; }
		
		//count=DOUBLE
		public Assignment getCountAssignment_0() { return cCountAssignment_0; }
		
		//DOUBLE
		public RuleCall getCountDOUBLETerminalRuleCall_0_0() { return cCountDOUBLETerminalRuleCall_0_0; }
		
		//frequency=DOUBLE
		public Assignment getFrequencyAssignment_1() { return cFrequencyAssignment_1; }
		
		//DOUBLE
		public RuleCall getFrequencyDOUBLETerminalRuleCall_1_0() { return cFrequencyDOUBLETerminalRuleCall_1_0; }
		
		//cumulatedFreq=DOUBLE
		public Assignment getCumulatedFreqAssignment_2() { return cCumulatedFreqAssignment_2; }
		
		//DOUBLE
		public RuleCall getCumulatedFreqDOUBLETerminalRuleCall_2_0() { return cCumulatedFreqDOUBLETerminalRuleCall_2_0; }
		
		//('.' | (rules+=RuleOrText ('.' rules+=RuleOrText)*))
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'.'
		public Keyword getFullStopKeyword_3_0() { return cFullStopKeyword_3_0; }
		
		//(rules+=RuleOrText ('.' rules+=RuleOrText)*)
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//rules+=RuleOrText
		public Assignment getRulesAssignment_3_1_0() { return cRulesAssignment_3_1_0; }
		
		//RuleOrText
		public RuleCall getRulesRuleOrTextParserRuleCall_3_1_0_0() { return cRulesRuleOrTextParserRuleCall_3_1_0_0; }
		
		//('.' rules+=RuleOrText)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//'.'
		public Keyword getFullStopKeyword_3_1_1_0() { return cFullStopKeyword_3_1_1_0; }
		
		//rules+=RuleOrText
		public Assignment getRulesAssignment_3_1_1_1() { return cRulesAssignment_3_1_1_1; }
		
		//RuleOrText
		public RuleCall getRulesRuleOrTextParserRuleCall_3_1_1_1_0() { return cRulesRuleOrTextParserRuleCall_3_1_1_1_0; }
	}
	
	
	private final GrammarElements pGrammar;
	private final RuleOrTextElements pRuleOrText;
	private final RuleElements pRule;
	private final ExpansionElements pExpansion;
	private final TerminalRule tID;
	private final TerminalRule tVTEXT;
	private final TerminalRule tCOMMENT;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public CmcCounterGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pGrammar = new GrammarElements();
		this.pRuleOrText = new RuleOrTextElements();
		this.pRule = new RuleElements();
		this.pExpansion = new ExpansionElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.mzattera.v4j.cmc.count.CmcCounter.ID");
		this.tVTEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.mzattera.v4j.cmc.count.CmcCounter.VTEXT");
		this.tCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.mzattera.v4j.cmc.count.CmcCounter.COMMENT");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.mzattera.v4j.cmc.count.CmcCounter.DOUBLE");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.mzattera.v4j.cmc.count.CmcCounter.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("io.github.mzattera.v4j.cmc.count.CmcCounter".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Grammar:
	//    rules+=Rule*
	//;
	public GrammarElements getGrammarAccess() {
		return pGrammar;
	}
	
	public ParserRule getGrammarRule() {
		return getGrammarAccess().getRule();
	}
	
	//RuleOrText:
	//    (rule=[Rule] | txt=VTEXT)
	//;
	public RuleOrTextElements getRuleOrTextAccess() {
		return pRuleOrText;
	}
	
	public ParserRule getRuleOrTextRule() {
		return getRuleOrTextAccess().getRule();
	}
	
	//Rule:
	//    name=ID ':' (expansions+=Expansion)+
	//;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Expansion:
	//    count=DOUBLE frequency=DOUBLE cumulatedFreq=DOUBLE  ('.' | (rules+=RuleOrText ('.' rules+=RuleOrText)*))
	//;
	public ExpansionElements getExpansionAccess() {
		return pExpansion;
	}
	
	public ParserRule getExpansionRule() {
		return getExpansionAccess().getRule();
	}
	
	//terminal ID: ('A'..'Z')('a'..'z'|'A'..'Z')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal VTEXT: ('a'..'z')+;
	public TerminalRule getVTEXTRule() {
		return tVTEXT;
	}
	
	//terminal COMMENT : '#' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getCOMMENTRule() {
		return tCOMMENT;
	}
	
	//terminal DOUBLE returns ecore::EDouble: ('0'..'9')+'.'('0'..'9')+;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal WS: (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
}
