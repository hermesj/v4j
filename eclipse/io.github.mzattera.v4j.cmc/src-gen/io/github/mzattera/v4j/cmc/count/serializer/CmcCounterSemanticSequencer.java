/*
 * generated by Xtext 2.25.0
 */
package io.github.mzattera.v4j.cmc.count.serializer;

import com.google.inject.Inject;
import io.github.mzattera.v4j.cmc.count.cmcCounter.CmcCounterPackage;
import io.github.mzattera.v4j.cmc.count.cmcCounter.Expansion;
import io.github.mzattera.v4j.cmc.count.cmcCounter.Grammar;
import io.github.mzattera.v4j.cmc.count.cmcCounter.Rule;
import io.github.mzattera.v4j.cmc.count.cmcCounter.RuleOrText;
import io.github.mzattera.v4j.cmc.count.services.CmcCounterGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class CmcCounterSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CmcCounterGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CmcCounterPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CmcCounterPackage.EXPANSION:
				sequence_Expansion(context, (Expansion) semanticObject); 
				return; 
			case CmcCounterPackage.GRAMMAR:
				sequence_Grammar(context, (Grammar) semanticObject); 
				return; 
			case CmcCounterPackage.RULE:
				sequence_Rule(context, (Rule) semanticObject); 
				return; 
			case CmcCounterPackage.RULE_OR_TEXT:
				sequence_RuleOrText(context, (RuleOrText) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Expansion returns Expansion
	 *
	 * Constraint:
	 *     (count=DOUBLE frequency=DOUBLE cumulatedFreq=DOUBLE (rules+=RuleOrText rules+=RuleOrText*)?)
	 */
	protected void sequence_Expansion(ISerializationContext context, Expansion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Grammar returns Grammar
	 *
	 * Constraint:
	 *     rules+=Rule+
	 */
	protected void sequence_Grammar(ISerializationContext context, Grammar semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RuleOrText returns RuleOrText
	 *
	 * Constraint:
	 *     (rule=[Rule|ID] | txt=VTEXT)
	 */
	protected void sequence_RuleOrText(ISerializationContext context, RuleOrText semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Rule returns Rule
	 *
	 * Constraint:
	 *     (name=ID expansions+=Expansion+)
	 */
	protected void sequence_Rule(ISerializationContext context, Rule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
